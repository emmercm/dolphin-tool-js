name: Dolphin Build

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SDL2_REF: ${{ inputs.sdl2_ref || 'release-2.30.6' }}
  DOLPHIN_REF: ${{ inputs.dolphin_ref || 'master' }}

jobs:
  build-linux:
    name: build-linux ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #- docker_image: i386/ubuntu:latest
          #  docker_arch: linux/386
          #  nodejs_arch: ia32
          - docker_image: ubuntu:latest
            docker_arch: linux/amd64
            nodejs_arch: x64
          - docker_image: ubuntu:latest
            docker_arch: linux/arm/v7
            nodejs_arch: arm
          - docker_image: ubuntu:latest
            docker_arch: linux/arm64/v8
            nodejs_arch: arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.DOLPHIN_REF }}
          submodules: 'recursive'
      - uses: docker/setup-qemu-action@v3
      - uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.docker_image }}
          shell: bash
          options: |
            --platform ${{ matrix.docker_arch }}
            --volume ${{ github.workspace }}:/build
            --workdir /build
          run: |
            set -euo pipefail

            apt-get update
            apt-get install -y build-essential git cmake
            # https://wiki.libsdl.org/SDL2/Installation
            here=$(pwd)
            cd $(mktemp -d)
            git clone --branch "${{ env.SDL2_REF }}" https://github.com/libsdl-org/SDL.git .
            mkdir build
            cd build
            ../configure
            make -j$(nproc)
            make install
            cd "${here}"

            # https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux
            apt-get update
            apt-get install -y build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libqt6svg6-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libcurl4-openssl-dev
            apt-get install -y libudev-dev libsystemd-dev || apt-get install -y libeudev-dev
            mkdir build && cd build
            cmake .. -DLINUX_LOCAL_DEV=true
            make -j$(nproc)
            cp -r ../Data/Sys/ Binaries/
            touch Binaries/portable.txt

            cd Binaries/
            ls -al
            strip dolphin-tool
            ls -al dolphin-tool
            
            file build/Binaries/dolphin-tool
      # Fix 'root' owning the 'build/' directory
      - run: sudo chown -R "${USER:=$(/usr/bin/id -run)}:$USER" *
      - name: Rename binary
        run: |
          dir="artifacts/packages/dolphin-tool-linux-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv build/Binaries/dolphin-tool "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/packages/**/dolphin-tool
          if-no-files-found: error

  build-macos:
    name: build-macos ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            nodejs_arch: x64
          - os: macos-14
            nodejs_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.DOLPHIN_REF }}
          submodules: 'recursive'
      - name: Build
        run: |
          brew install qt@6

          # https://github.com/dolphin-emu/dolphin/wiki/Building-for-macOS
          export Qt5_DIR=/opt/homebrew/opt/qt@6/lib/cmake/Qt6
          export PATH=$PATH:$Qt5_DIR
          mkdir -p build
          cd build
          #cmake .. -DSKIP_POSTPROCESS_BUNDLE=true
          cmake ..
          make "-j$(sysctl -n hw.physicalcpu)"

          cd Binaries/
          ls -al
          strip dolphin-tool
          ls -al dolphin-tool

          file dolphin-tool
          otool -L dolphin-tool
      - name: Rename binary
        run: |
          dir="artifacts/packages/dolphin-tool-darwin-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv build/Binaries/dolphin-tool "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/packages/**/dolphin-tool
          if-no-files-found: error
