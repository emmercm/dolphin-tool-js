# Requires repo secret: PERSONAL_ACCESS_TOKEN with permissions:
#   Contents: read and write
#   Pull Requests: read and write

name: Dolphin Build

on:
  pull_request: # TODO(cemmer): DEBUG!
  workflow_dispatch:
    inputs:
      dolphin_ref:
        description: 'Dolphin GitHub version tag (e.g. "2506a")'
        required: true
        type: string
      auto-merge:
        description: 'Auto-merge pull request?'
        required: true
        type: boolean
        default: true
run-name: "${{ github.workflow }}: ${{ inputs.dolphin_ref || '(default version)' }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  dolphin_ref: ${{ inputs.dolphin_ref || '2506a' }}
  igir_ref: ${{ github.ref }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.parse-version.outputs.major }}
      minor: ${{ steps.parse-version.outputs.minor }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.dolphin_ref }}
      - id: parse-version
        run: |
          set -euo pipefail
          echo "major=$(grep 'set(DOLPHIN_VERSION_MAJOR' CMake/ScmRevGen.cmake | sed -E 's/.*"([0-9]+)".*/\1/')" >> "${GITHUB_OUTPUT}"
          echo "minor=$(grep 'set(DOLPHIN_VERSION_MINOR' CMake/ScmRevGen.cmake | sed -E 's/.*"([0-9]+)".*/\1/')" >> "${GITHUB_OUTPUT}"

  build-linux:
    name: build-linux ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #- docker_image: i386/ubuntu:latest
          #  docker_arch: linux/386
          #  nodejs_arch: ia32
          - docker_image: ubuntu:latest
            docker_arch: linux/amd64
            nodejs_arch: x64
          - docker_image: ubuntu:latest
            docker_arch: linux/arm/v7
            nodejs_arch: arm
            cmake_opts: -DENABLE_GENERIC=true
          - docker_image: ubuntu:latest
            docker_arch: linux/arm64/v8
            nodejs_arch: arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.dolphin_ref }}
          submodules: 'recursive'
      - uses: docker/setup-qemu-action@v3
      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.docker_image }}
          shell: bash
          options: |
            --platform ${{ matrix.docker_arch }}
            --volume ${{ github.workspace }}:/build
            --workdir /build
          run: |
            set -euo pipefail
            set -x

            # https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux
            apt-get update
            apt-get install -y build-essential cmake pkg-config
            # Dolphin provides these at ./Externals/, but use the latest available instead
            apt-get install -y libusb-1.0-0-dev libudev-dev
            rm "$(pkg-config --variable=libdir libusb-1.0)"/libusb*.so*
            mkdir build && cd build
            cmake \
              -DDISTRIBUTOR="${{ github.repositoryUrl }}" \
              -DENABLE_CLI_TOOL=ON \
              -DUSE_SYSTEM_LIBS=OFF \
              -DUSE_UPNP=OFF \
              -DUSE_DISCORD_PRESENCE=OFF \
              -DENABLE_QT=OFF \
              -DENABLE_ALSA=OFF \
              -DENABLE_PULSEAUDIO=OFF \
              -DENABLE_CUBEB=OFF \
              -DENABLE_LLVM=OFF \
              -DENABLE_TESTS=OFF \
              -DENABLE_VULKAN=OFF \
              -DUSE_MGBA=OFF \
              -DENABLE_AUTOUPDATE=OFF \
              -DENCODE_FRAMEDUMPS=OFF \
              -DENABLE_SDL=OFF \
              -Wno-dev \
              `# Linux options` \
              ${{ matrix.cmake_opts }} \
              -DENABLE_X11=OFF \
              -DENABLE_EGL=OFF \
              -DENABLE_HWDB=OFF \
              -DENABLE_EVDEV=OFF \
              -DENABLE_BLUEZ=OFF \
              -DUSE_SYSTEM_LIBUSB=ON \
              ..
            make -j$(nproc)
            mv Binaries/dolphin-tool ../
            cd ../

            # Test binary
            ./dolphin-tool --help || true

            # Strip binary
            apt-get install -y binutils
            ls -al dolphin-tool
            strip dolphin-tool
            ls -al dolphin-tool
      # Fix 'root' owning the 'build/' directory
      - run: sudo chown -R "${USER:=$(/usr/bin/id -run)}:$USER" ./*
      - name: Test binary
        run: |
          set -x
          file dolphin-tool
          readelf -d dolphin-tool | grep NEEDED
          if readelf -d dolphin-tool | grep NEEDED | grep -q 'libusb-1.0'; then exit 1; fi
      - name: Rename binary
        run: |
          dir="artifacts/packages/dolphin-tool-linux-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv dolphin-tool "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/**/dolphin-tool
          if-no-files-found: error

  build-macos:
    name: build-macos ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            nodejs_arch: x64
          - os: macos-15
            nodejs_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.dolphin_ref }}
          submodules: 'recursive'
      - name: Build
        run: |
          brew install qt@6

          # https://github.com/dolphin-emu/dolphin/wiki/Building-for-macOS
          # https://github.com/dolphin-emu/dolphin/blob/2412/BuildMacOSUniversalBinary.py
          mkdir -p build
          cd build
          cmake \
            -DDISTRIBUTOR="${{ github.repositoryUrl }}" \
            -DENABLE_CLI_TOOL=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_UPNP=OFF \
            -DENABLE_QT=OFF \
            -DENABLE_ALSA=OFF \
            -DENABLE_PULSEAUDIO=OFF \
            -DENABLE_CUBEB=OFF \
            -DENABLE_LLVM=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_VULKAN=OFF \
            -DUSE_MGBA=OFF \
            -DENABLE_AUTOUPDATE=OFF \
            -DENCODE_FRAMEDUMPS=OFF \
            -DENABLE_SDL=OFF \
            -Wno-dev \
            `# macOS options` \
            -DSKIP_POSTPROCESS_BUNDLE=true \
            -DUSE_SYSTEM_ICONV=ON \
            -DUSE_SYSTEM_BZIP2=ON \
            -DUSE_SYSTEM_CURL=ON \
            ..
          make "-j$(sysctl -n hw.physicalcpu)" || true
          mv Binaries/dolphin-tool ../
          cd ../
      - name: Test binary
        run: |
          set -x
          ./dolphin-tool --help || true
          file dolphin-tool
          otool -L dolphin-tool
      - name: Strip binary
        run: |
          ls -al dolphin-tool
          strip dolphin-tool
          ls -al dolphin-tool
      - name: Rename binary
        run: |
          dir="artifacts/packages/dolphin-tool-darwin-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv dolphin-tool "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: |
            artifacts/**/dolphin-tool
            artifacts/**/*.dylib
          if-no-files-found: error

  build-windows:
    name: build-windows ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x64
            nodejs_arch: x64
          - platform: ARM64
            nodejs_arch: arm64
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: dolphin-emu/dolphin
          ref: ${{ env.dolphin_ref }}
          submodules: 'recursive'
      - uses: microsoft/setup-msbuild@v2
      - name: Build
        run: |
          msbuild Source/dolphin-emu.sln -maxcpucount /property:Configuration=Release "/property:Platform=${{ matrix.platform }}"
          Get-ChildItem -Path Binary\* -Recurse
          Move-Item -Path Binary\*\DolphinTool.exe -Destination .\
      - name: Rename binary
        run: |
          $Dir = "artifacts\packages\dolphin-tool-win32-${{ matrix.nodejs_arch }}"
          mkdir "$Dir"
          mv DolphinTool.exe "$Dir\DolphinTool.exe"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/**/DolphinTool.exe
          if-no-files-found: error

  git-update:
    needs:
      - get-version
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.igir_ref }}
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - uses: actions/setup-node@v4
      - id: bump-and-commit
        run: |
          package_name=$(jq --raw-output '.name' packages/dolphin-tool/package.json)
          major_version=$(npm show "${package_name}" --json | jq --raw-output '.versions | .[]' | sed 's/\.[0-9]*//g' | sort | tail -1)
          # shellcheck disable=SC2001
          minor_version=${{ needs.get-version.outputs.major }}
          previous_version=$(npm show "${package_name}" --json | jq --raw-output '.versions | .[]' | grep "${minor_version}" | tail -1)
          if [[ "${previous_version}" != "" ]]; then
            # shellcheck disable=SC2001
            new_patch_version=$(echo "$(echo "${previous_version}" | sed 's/[0-9]*\.//g') + 1" | bc)
            new_version="${major_version}.${minor_version}.${new_patch_version}"
          else
            new_version="${major_version}.${minor_version}.0"
          fi
          lerna version "${new_version}" --yes || true

          chmod +x packages/dolphin-tool-*-*/dolphin-tool packages/dolphin-tool-*-*/DolphinTool.exe
          ls -lR
          git add package*.json lerna.json packages

          USER_EMAIL="${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          echo "USER_EMAIL=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"
          git config --global user.email "${USER_EMAIL}"

          USER_NAME="$(gh api "/users/${GITHUB_ACTOR}" | jq .name -r)"
          echo "USER_NAME=${USER_NAME}" >> "${GITHUB_OUTPUT}"
          git config --global user.name "${USER_NAME}"

          PACKAGE_VERSION="$(jq --raw-output '.version' packages/dolphin-tool/package.json)"
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> "${GITHUB_OUTPUT}"
          git commit -m "v${PACKAGE_VERSION}"
        env:
          GH_TOKEN: ${{ github.token }}
      # Create the pull request, and optionally mark it as auto-merge
      - id: create-pull-request
        uses: peter-evans/create-pull-request@v6
        with:
          # GitHub won't run workflows off of events from the `github-actions` user
          # But also, I want the PR to be created under my name for cosmetic reasons
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          author: ${{ steps.bump-and-commit.outputs.USER_NAME }} <${{ steps.bump-and-commit.outputs.USER_EMAIL }}>
          branch: ${{ github.actor }}/${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}
          delete-branch: true
          title: v${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}
          assignees: ${{ !inputs.auto-merge && github.repository_owner || '' }}
          reviewers: ${{ (!inputs.auto-merge && github.repository_owner != github.actor) && github.repository_owner || '' }}
      - if: ${{ steps.create-pull-request.outputs.pull-request-number }}
        run: |
          {
            echo "# v${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}"
            echo ""
            echo "${{ steps.create-pull-request.outputs.pull-request-url }}"
          } >> "${GITHUB_STEP_SUMMARY}"
      - if: ${{ steps.create-pull-request.outputs.pull-request-number && inputs.auto-merge }}
        run: gh pr merge "${{ steps.create-pull-request.outputs.pull-request-number }}" --squash --auto
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
